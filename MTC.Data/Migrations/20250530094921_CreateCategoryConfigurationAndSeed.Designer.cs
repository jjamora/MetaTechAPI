// <auto-generated />
using System;
using MTC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTC.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250530094921_CreateCategoryConfigurationAndSeed")]
    partial class CreateCategoryConfigurationAndSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MTC.Core.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "ce275698-9c28-422e-8c07-8b913e8bb283",
                            Name = "Supreme"
                        },
                        new
                        {
                            Id = "55596daa-2de7-47d0-9372-4860ff3c17a2",
                            Name = "Veggie"
                        },
                        new
                        {
                            Id = "442c8d99-3b07-4aaf-9b07-a562ca32f0eb",
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = "101f4fb4-2c6f-4734-9fa1-c1d4bf185deb",
                            Name = "Classic"
                        });
                });

            modelBuilder.Entity("MTC.Core.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MTC.Core.Models.Order_Detail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Order_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PizzaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pizza_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PizzaId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MTC.Core.Models.Pizza", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PIzza_TypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PIzza_Type_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PIzza_TypeId");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("MTC.Core.Models.Pizza_Type", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Pizza_Types");
                });

            modelBuilder.Entity("MTC.Core.Models.Order_Detail", b =>
                {
                    b.HasOne("MTC.Core.Models.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId");

                    b.HasOne("MTC.Core.Models.Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaId");

                    b.Navigation("Order");

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("MTC.Core.Models.Pizza", b =>
                {
                    b.HasOne("MTC.Core.Models.Pizza_Type", "PIzza_Type")
                        .WithMany()
                        .HasForeignKey("PIzza_TypeId");

                    b.Navigation("PIzza_Type");
                });

            modelBuilder.Entity("MTC.Core.Models.Pizza_Type", b =>
                {
                    b.HasOne("MTC.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MTC.Core.Models.Order", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
